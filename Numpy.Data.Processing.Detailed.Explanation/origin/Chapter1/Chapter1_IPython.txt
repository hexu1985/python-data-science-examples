Chapter1	NumPy的基础
----------------------------------------
1.1 NumPy 的基础与安装方法
----------------------------------------
1.1.2　Python 的安装
----------------------------------------
［终端窗口］
$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

［终端窗口］
$ brew install python3

［终端窗口］
$ python

简单的辅导
----------------------------------------
>>>1 + 2

>>>1 - 2

>>>3 * 4

>>>5 / 2

>>>x = 5

>>>x + 2

>>>3 * x

>>>print(x)

>>>type((1, 2, 3)) # 使用type函数对数据类型进行确认

>>>type([1, 2, 3])

>>>(1, 2, 3, 4, 5)

>>>a = (1, 2, 3, 4, 5) # 将元组代入变量a中

>>>a[0]

>>>b = [1, 2, 3, 4, 5] # 创建列表

>>>b[1]

>>>b[4]

>>>dic = {'a': 1, 'b': 2, 'c': 3} # 创建字典

>>>dic['a'] #使用冒号（ ：）左侧称为键（Key）的值引用保存的数据

>>>for i in range(3):
...    print(i)

>>>def function(x):
...    return x + 5
...
>>>function(3)

IPython的安装
----------------------------------------
［终端窗口］
$ pip install ipython

［终端窗口］
$ ipython

1.1.3　NumPy的安装方法
----------------------------------------
［终端窗口］
$ pip install numpy

［终端窗口］
$ pip install numpy==1.14.3

［终端窗口］
$ sudo easy_install pip

不使用pip的安装方法
----------------------------------------
［终端窗口］
$ sudo apt-get install python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose

［终端窗口］
$ brew tap homebrew/science && brew install python numpy scipy matplotlib


1.1.4 NumPy入门教程
----------------------------------------
［终端窗口］
$ ipython

In [1]:import numpy as np

In [2]:a = np.array([1, 2, 3])

In [3]:a * 3

In [4]:a + 2

In [5]:[1, 2, 3] * 3

In [6]:b = np.array([2, 2, 0])

In [7]:a + b

In [8]:a / b

In [9]:a * b

In [10]:np.dot(a, b)

In [11]:np.arange(10)

In [12]:np.arange(0, 10, 2) # (起点，终点，间隔)

In [13]:np.linspace(0, 10, 15) # 0~10划分为15等分

In [14]:c = np.array([[1, 2, 3], [4, 5, 6]]) # 创建二维数组

In [15]:c

In [16]:c.shape

In [17]:d = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]],
...:[[13,14,15],[16,17,18],[19,20,21],[22,23,24]]])

------------------
In [17]:还可以创建三维数组
------------------
d = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]],
[[13,14,15],[16,17,18],[19,20,21],[22,23,24]]])
------------------

In [18]:d

In [19]:d.shape

In [20]:np.sum(c)

In [21]:np.sum(c, axis=1)

In [22]:c.reshape(3, 2)

In [23]:c.reshape(6, 1)

In [24]:c.T

In [25]:np.transpose(c)

In [26]:np.random.randn()

In [27]:np.random.rand()

In [28]:np.random.randn(2, 3)

In [29]:a

In [30]:a[0]

In [31]:a[2]

In [32]:a

In [33]:a[1] = 3

In [34]:a

In [35]:a[1] = 2

In [36]:a

In [37]:c

In [38]:c[0, 0]

In [39]:c[0, 2]

In [40]:c[1, 2]

In [41]:d = np.array([0, 5, 2, 7, 1, 9])

In [42]:d[1:5]

In [43]:d[1:3]

In [44]:d[0:5:2]

In [45]:d[::-1]

In [46]:a

In [47]:c

In [48]:a + c

In [49]:a * c

In [50]:import time # 导入用于处理时间的模块

In [51]:def calculate_time():
...:    a = np.random.randn(100000)
...:    b = list(a) # 转换为列表
...:    start_time = time.time() #  设置开始时间
...:    for _ in range(1000):
...:        sum_1 = np.sum(a)
...:    print("Using NumPy\t %f sec" % (time.time()-start_time))
...:    start_time = time.time() # 再次设置开始时间
...:    for _ in range(1000):
...:       sum_2 = sum(b)
...:    print("Not using NumPy\t %f sec" % (time.time()-start_time))

------------------
In [51]:易于使用的文本
------------------
def calculate_time():
    a = np.random.randn(100000)
    b = list(a) # 转换为列表
    start_time = time.time() #  设置开始时间
    for _ in range(1000):
       sum_1 = np.sum(a)
    print("Using NumPy\t %f sec" % (time.time()-start_time))
    start_time = time.time() # 再次设置开始时间
    for _ in range(1000):
        sum_2 = sum(b)
    print("Not using NumPy\t %f sec" % (time.time()-start_time))
------------------

In [52]:calculate_time()

In [53]:a = np.random.randn(10000000)

In [54]:%timeit np.sum(a)

In [55]:%timeit sum(a)

1.2 多维数据结构ndarray的基础
----------------------------------------
1.2.2 属性（attributes）
----------------------------------------
In [1]:import numpy as np # 导入NumPy模块
In [2]:a = np.array([1, 2, 3]) #  生成ndarray实例

In [3]:type(a) # 确认对象的类

In [4]:b = np.array([[1, 2, 3], [4, 5, 6]]) # 创建2‐dimensional array(二维数组)

In [5]:a

In [6]:b # 分别显示所得到的结果如下

In [7]:b.T #进行转置

In [8]:a.T # 因为a.ndim<2，所以没有变化

In [9]:a.data # 显示内存中的地址

In [10]:a.dtype # 显示数据的类型

In [11]:a.flags

In [12]:b.flags #  可以获取各种信息

In [13]:a.flat[1] # 显示将a转换为一维数组后其中的第一个元素

In [14]:b.flat[4] # 显示将b转换为一维数组后其中的第四个元素

In [15]:c = np.array([1.-2.6j,2.1+3.j, 4.-3.2j]) # 创建以复数为元素的ndarray实例

In [16]:c.real # 显示实数部分

In [17]:c.imag # 显示虚数部分

In [18]:a.size #元素的数量

In [19]:b.size

In [20]]:a.itemsize # 按字节序显示每个元素的字长

In [21]:b.itemsize # 在某些环境中可能是4

In [22]:c.size, c.itemsize

In [23]:a.nbytes # 按字节序显示数组的长度，在某些环境中可能是12

In [24]:b.nbytes #  在某些环境中可能是24

In [25]:c.nbytes

In [26]:a.size * a.itemsize == a.nbytes #  这个等式成立

In [27]:a.ndim # 显示维数

In [28]:b.ndim

In [29]:a.shape # 显示形状

In [30]:b.shape # 显示形状

In [31]:d = np.array([[[2,3,2],[2,2,2]],[[4,3,2],[5,7,1]]]) # 生成三维数组

In [32]:d.shape, d.ndim # 显示形状和维数

In [33]:a.strides  #在各个维度方向上(axis=ndim,axis=ndim-1,…
# axis=1,axis=0)移动到下一个元素所需移动的字节数。在某些环境下可能为(4,)

In [34]:b.strides #  .ndim=2，在某些环境下可能为(12, 4)

In [35]:c.strides # .ndim = 3

In [36]:d.strides # .ndim=3在某些环境下可能为(24,12,4)

In [37]:a.ctypes.data #  使用ctypes模块的操作

In [38]:a.base # a的基类数组在什么地方

In [39]:e = a[:2]

In [40]:e.base

In [41]:e.base is a

In [42]:a.base is e.base

1.2.4步长
----------------------------------------
In [43]:a = np.random.randn(100,100)

In [44]:b = np.array(a, order='C') # 行主序

In [45]:c = np.array(a, order='F') # column-major

In [46]:b.strides, c.strides #从步长上看，二者是相反的

In [47]:np.allclose(b, c)      # 确认数组的元素是否完全相同

In [48]:x = np.ones((100000,)) ＃ 将所有的元素都初始化为1

In [49]:y = np.ones((100000*100,))[::100] # 每隔100个元素进行读取

In [50]:x.strides # 为了移动到相邻的下一个元素，需要跳转8个字节的距离

In [51]:y.strides #为了移动到相邻的下一个元素，需要跳转800个字节的距离

In [52]:x.shape, y.shape

In [53]:%timeit x.sum() # 很明显这个速度更快

In [54]:%timeit y.sum()

In [55]:y_copy = np.copy(np.ones((100000*100,))[::100])

In [56]:y_copy.strides

In [57]:%timeit y_copy.sum()

1.2.5 广播
----------------------------------------
In [58]:a = np.array([1, 2, 3])

In [59]:b = np.array([[1, 1, 1],[2, 4, 1]]) # 二维数组

In [60]:b + a #  使用广播功能

1.3 广播
----------------------------------------
1.3.1 何谓广播
----------------------------------------
In [1]:import numpy as np

In [2]:np.array([[1, 2, 3]]) + [1]

1.3.2 广播的运行机制
----------------------------------------
In [3]:a = np.array([[1, 2]])

In [4]:a.shape

In [5]:b = np.array([3, 4])

In [6]:b.shape

In [7]:a + b

In [8]:a = np.array([1, 2])

In [9]:b = np.array([[3, 4],[2, 3]])

In [10]:a

In [11]:b

In [12]:a.shape

In [13]:b.shape

In [14]:a + b

In [15]:a = np.array([[2], [1]])

In [16]:b = np.array([5])

In [17]:c = np.array([[[1, 2, 3], [4, 5, 6]],[[7, 8, 9], [10, 11, 12]]])

In [18]:a

In [19]:b

In [20]:c

In [21]:a.shape

In [22]:b.shape

In [23]:c.shape

In [24]:a + b + c

1.4 スライシング
----------------------------------------
In [1]:a = [1, 2, 3, 4, 5]

In [2]:a[1:-1]

1.4.2 　切片的使用方法
----------------------------------------
In [3]:import numpy as np

In [4]:a = np.arange(15)

In [5]:a

In [6]:a[5:11:2]

In [7]:a = np.arange(10) #  创建包含10个连号数据的数组

In [8]:a

In [9]:a[1:5] # 1～4

In [10]:a[2:8:2] #  2~7每隔一个

In [11]:a[::-1] # 逆序排列

In [12]:a[:3] # 0～2

In [13]:a[4:] # 4～9

In [14]:a[:3],a[3:] # 将3作为边界划分为两个数组

In [15]:a[::2] # 指定间隔一个元素

In [16]:a[:] # 指定全范围内的数据

1.4.3 向高维数据结构扩展
----------------------------------------
In [17]:b = np.arange(20).reshape(4,5) # 4×5的二维数组

In [18]:b

In [19]:b[1:3, 2:4] # 将第1~2行，第2~3列提取出来

In [20]:b[:2, 1:] #  将第0~1行，第1~4列提取出来

In [21]:b[::2, :] # 在行方向上每隔一个提取元素

In [22]:b[:, ::2] # 在列方向上每隔一个提取元素

In [23]:b[:, ::-1] # 逆順

In [24]:b[::-1, ::-1] # 全部颠倒过来

In [25]:c = np.zeros((3, 4, 5)) #  3×4×5的三维数组

In [26]:c

In [27]:c[1:, 1:4, :] = 1

In [28]:c

In [29]:c = np.zeros((3, 4, 5)) # 重置

In [30]:c[:, 1:2, 3:] = 1

In [31]:c

In [32]:c = np.zeros((3, 4, 5)) # 重置

In [33]:c[:, :, ::2] = 1 #  每两个一次

In [34]:c

In [35]:c = np.zeros((3, 4, 5)) #  重置

In [36]:c[::2, ::2, ::2] = 1

In [37]:c

1.5 关于坐标轴和维度
----------------------------------------
1.5.1 ndarray的维度
----------------------------------------
In [1]:import numpy as np

In [2]:a = np.array([[1, 2, 3], [4, 5, 6]])

In [3]:a.shape

In [4]:a.ndim

1.5.2 关于坐标轴
----------------------------------------
In [5]:a = np.arange(6).reshape((3, 2))

In [6]:a

In [7]:a.shape

In [8]:b = np.array([a, a])

In [9]:b.shape

In [10]:b

1.5.3 　作为函数参数的axis
----------------------------------------
In [11]:b.sum(axis=0)

In [12]:b.sum(axis=0).shape

In [13]:b.sum(axis=1)

In [14]:b.sum(axis=1).shape

In [15]:b.sum(axis=2)

In [16]:b.sum(axis=2).shape

1.6 ndarray的shape属性
----------------------------------------
1.6.1 ndarray.shape
----------------------------------------
In [1]:import numpy as np

In [2]:a = np.array([5, 3, 8, 9])

In [3]:a

In [4]:a.shape

In [5]:a = np.array([5, 3, 8, 9])

In [6]:b = a.reshape((2, 2))

In [7]:b

In [8]:b.shape

In [9]:a

In [10]:a.shape

In [11]:a.shape = (4, 1)

In [12]:a

In [13]:c = np.arange(12).reshape((3, 4))

In [14]:c

In [15]:c.shape=(1, 12)

In [16]:c

In [17]:c.shape = (13,) # 如果元素数量不正确，则会返回错误

In [18]:a = np.array([1, 2, 3, 4, 5]) #  简单的一维数组

In [19]:a.shape

In [20]:b = np.array([[1], [2], [3], [4], [5]]) # 如果转换为纵向量其shape就变为(R,1)

In [21]:b.shape

1.7 元素数据类型的种类与指定方法
----------------------------------------
1.7.2 　数据类型
----------------------------------------
In [1]:import numpy as np

In [2]:a = np.array([0, 1, 2]) # 首先在什么都不指定的情况下生成数组

In [3]:a.dtype #首先在什么都不指定的情况下生成数组

In [4]:b = np.array([0, 1, 2], dtype='int32') # 尝试减少位数

In [5]:b.dtype

In [6]:b

In [7]:c = np.array([0, 1, 2], dtype='float') # float和int的默认位数是64

In [8]:c #  与c元素的表示方法为int时不同，数值里会附带小数点

In [9]:d = np.array([3e50, 4e35], dtype='int64') #  如果位数太大，无法使用'int'表示时会产生溢出错误

In [10]:d = np.array([3e50, 4e35], dtype='float64') #  如果改成float，就可以成功地生成数组

In [11]:e = np.array([3.5, 4.2, -4.3], dtype='int') # 即使是使用小数表示的数组，如果数据类型被设置为int，则只有整数部分被保留

In [12]:e

In [13]:f = np.array([0, 3, 0, -1], dtype = 'bool') #将0转换为False，如果不是0，则转换为True

In [14]:f

In [15]:g = np.array([0., 1., 2.], dtype='int64')

In [16]:g

In [17]:g.dtype = 'int32' # 将数据类型转换为int32

In [18]:g

In [19]:g.dtype = 'float64' #将数据类型转换为float64

In [20]:g

In [21]:g.dtype = 'float32' # 将位数转换为32

In [22]:g

In [23]:g.dtype = 'int64' #  将数据类型恢复为原有类型，则数据的值也会恢复

In [24]:g

In [25]:h = np.random.randint(10, size=100, dtype='int8') # 生成100个0~9的整数。数据类型是'int8'

In [26]:i = np.random.randint(10, size=100, dtype='int64') #  将位数设置为64

In [27]:h.nbytes # 确认字节数

In [28]:i.nbytes #  变为h的8倍

1.8 副本与视图的区别
----------------------------------------
1.8.1 副本和视图
----------------------------------------
In [1]:import numpy as np

In [2]:a = np.array([1, 2, 3])

In [3]:d = a.view() #创建视图

In [4]:d[0] = 100 # 改变视图中的一个值

In [5]:d

In [6]:a # 原有数组a中的数据也被改变了

In [7]:c = a.copy()

In [8]:c[1] = 25

In [9]:c

In [10]:a

1.8.2 不同操作方式的区别
----------------------------------------
In [11]:a = np.array([1, 2, 3])

In [12]:b = a # 将a代入b中

In [13]:id(a) == id(b) # 确认引用的内存地址是否相同

In [14]:a = np.array([1, 2, 3])

In [15]:c = a[:] #  换一种语法

In [16]:id(a) == id(c) #可以看出引用的是不同的对象

In [17]:c[1] = 22 # 修改c的一部分

In [18]:a # 对c做的修改也在a中被反映了出来

In [19]:d = a[:1]

In [20]:id(d) == id(a)

In [21]:d[0] = 11

In [22]:a

In [23]:d

In [24]:e = a.copy() #代入a的副本

In [25]:e.base is a

In [26]:e[2] = 234

In [27]:e

In [28]:a

In [29]:print(a.base)

In [30]:f = a.copy()

In [31]:f.base is a

In [32]:a = np.array([1, 2, 3])

In [33]:c = a # 创建作为视图的变量c

In [34]:a = a + 1 #加1

In [35]:c # 加法运算没有被反映到c中

In [36]:a

In [37]:a = np.array([1, 2, 3])

In [38]:c = a

In [39]:a += 1

In [40]:c

In [41]:a

In [42]:a = np.array([1, 2, 3])

In [43]:c = a

In [44]:np.add(a, 1, out=a)

In [45]:a

In [46]:c

In [47]:def test():
...:    import numpy as np
...:    import time
...:    X = np.ones(100000000, dtype='int8')
...:    Y = np.ones(100000000, dtype='int8')
...:    a = time.time()
...:    for _ in range(100):
...:        X = X*4 + Y*3
...:        X = np.ones(100000000, dtype='int8')
...:    b = time.time()
...:    print('X = X*4 + Y*3: {} sec'.format((b-a)/100))
...:    a = time.time()
...:    for _ in range(100):
...:        X *= 4
...:        X += Y*3
...:        X = np.ones(100000000, dtype='int8')
...:    b = time.time()
...:    print('X *= 4; X += Y*3: {} sec'.format((b-a)/100))
...:    a = time.time()
...:    for _ in range(100):
...:        np.multiply(X, 4, out=X)
...:        np.multiply(Y, 3, out=Y)
...:        np.add(X, Y, out=X)
...:        X = np.ones(100000000, dtype='int8')
...:    b = time.time()
...:    print("using functions: {} sec".format((b-a)/100))

------------------
In [47]:容易利用的文本
------------------
def test():
    import numpy as np
    import time
    X = np.ones(100000000, dtype='int8')
    Y = np.ones(100000000, dtype='int8')
    a = time.time()
    for _ in range(100):
        X = X*4 + Y*3
        X = np.ones(100000000, dtype='int8')
    b = time.time()
    print('X = X*4 + Y*3: {} sec'.format((b-a)/100))
    a = time.time()
    for _ in range(100):
        X *= 4
        X += Y*3
        X = np.ones(100000000, dtype='int8')
    b = time.time()
    print('X *= 4; X += Y*3: {} sec'.format((b-a)/100))
    a = time.time()
    for _ in range(100):
        np.multiply(X, 4, out=X)
        np.multiply(Y, 3, out=Y)
        np.add(X, Y, out=X)
        X = np.ones(100000000, dtype='int8')
    b = time.time()
    print("using functions: {} sec".format((b-a)/100))
------------------

In [48]:test()

In [49]:a = np.random.randn(2, 3, 9)

In [50]:b = a.ravel()

In [51]:c = a.flatten()

In [52]:a

In [53]:a[0,0,0] = 129

In [54]:a[0,0,0], b[0], c[0]

In [55]:a = np.random.randint(10, size=100)

In [56]:a

In [57]:n = a%3==0 # 3的倍数的位置上是True

In [58]:n

In [59]:a[n] #将3的倍数的元素提取出来

In [60]:k = a[n]

In [61]:np.may_share_memory(a, k) #  用于确认内存是否是共享的函数。详细内容将在1.8.5小节中进行讲解

In [62]:f = a[np.arange(0, 10, 2)]

In [63]:np.may_share_memory(a, f)

In [64]:a = np.array([1, 2, 3])

In [65]:b = a

In [66]:c = b

In [67]:d = a.copy()

In [68]:np.may_share_memory(a, b) # 如果是True，则说明b是a的视图

In [69]:np.may_share_memory(a, c) # 这里也返回True

In [70]:np.may_share_memory(a, d) #  由于d是a的副本，因此返回False

In [71]:np.shares_memory(a, b) # 更严谨的判断使用share_memory函数

In [72]:np.shares_memory(a, d)

